<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--  1. 组件扫描 -->
    <context:component-scan base-package="com.ly.springmvc" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  2. 视图解析器
         工作机制:  prefix + 请求处理方法的返回值 + suffix  =  物理视图路径.
                  /WEB-INF/views/success.jsp
        WEB-INF: 是服务器内部路径。 不能直接从浏览器端访问该路径下的资源. 但是可以内部转发进行访问
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
        <!-- 配置视图解析器的优先级 值越小 优先级越高-->
        <property name="order" value="100"></property>
    </bean>

    <!-- 不经过Handler直接跳转页面 -->
    <mvc:view-controller path="testViewController" view-name="resData"/>
    <!-- 使用了view-controlelr以后，会导致RequestMapping的映射失效，因此需要加上 annotation-driven的配置 -->
    <!-- 后面讲 -->
    <!--
    将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，
    就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果是由映射的请求，才由 DispatcherServlet 继续处理

    如果web应用服务器的默认的Serlvet的名字不叫"default",则需要通过default-servlet-name来进行指定.

    配置了default-serlvet-handler后，RequestMapping的映射会失效，需要加上annotation-driven的配置。
    -->
    <mvc:default-servlet-handler />
    <mvc:annotation-driven/>

    <!-- 配置文件的上传
       该bean的id值必须是 multipartResolver , 因为springmvc底层会通过该名字到容器中找对应的bean
       DispatcherServlet 476
     -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 保证与上传表单所在的Jsp页面的编码一致. -->
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="maxUploadSize" value="10485760"></property>
    </bean>
    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <!--1. 拦截所有的请求 按照配置顺序来请求 配置在上面的拦截器先被执行-->
        <bean class="com.ly.springmvc.interceptor.MyFirstInterceptor"></bean>
        <bean class="com.ly.springmvc.interceptor.MySecondInterceptor"></bean>
        <!--使用注解用ref-->
        <!-- <ref bean="myFirstInterceptor"/> -->

        <!-- 2. 指定拦截 或者指定不拦截
            <mvc:interceptor>
                <mvc:mapping path="/emps"/>
                <mvc:exclude-mapping path="/emps"/>
                <bean class="com.ly.springmvc.interceptor.MyFirstInterceptor"></bean>
                <ref bean="myFirstInterceptor"/>
            </mvc:interceptor>
        -->
    </mvc:interceptors>

</beans>
